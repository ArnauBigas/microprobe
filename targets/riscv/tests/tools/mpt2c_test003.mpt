; Microprobe Test Definition File
[MPT]
mpt_version = 0.5 ;  Format version of this MPT file.

[REGISTERS] ; Section to specify the initial register values

; Format: register = value. E.g.:

; Set GR0, GR1 and GR2 register to 0, 1, 2 values respectively
;GR0 = 0x0


[DATA] ; Section to specify the variables

; Data section default address. Variables will be placed from this address
; if their address is not specified

default_address = 0x0000000010040000

; Variable Declaration
; Format: var_name = [ "type", nelems, address, alignment, init_values ]
; where:
;   - "type": is a string specifying the type of elements in the variable
;   - nelems: is the number of elements in the variable
;   - address : is the address of the variable, if set the address will be
;               fixed, otherwise, it will be computer by microprobe
;   - alignment : alignment requirements of the variable. It should not
;                 conflict with address if specified. It can be set to None
;   - init_values : if it is a single value, all the elements will be
;                   initialized to that value, if it is an array, elements
;                   will be initialized to the values specified in a round-
;                   robin fashion. Two special keywords can be specified:
;                   RNDFP and RNDINT to initialize the elements to random FP
;                   and random INT values
;
; Note that variable names ARE NOT case sensitive. I.e. VAR = Var = var

count	=	[ "int64_t", 1, 0x10040000, 0x8, 3405695742 ]
linkedlist	=	[ "uint8_t", 80, 0x10040010, 0x0, [8, 7, 6, 5, 4, 3, 2, 1, 32, 160, 32, 171, 108, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 48, 160, 32, 171, 108, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 64, 160, 32, 171, 108, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 80, 160, 32, 171, 108, 85, 0, 0, 8, 7, 6, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0] ]
microprobe_stack	=	[ "uint8_t", 4096, None, 0x10, None ]

[CODE] ; Section to specify the code

; Code section default address. Code will be placed from this address
; if the instruction address is not specified

default_address = 0x000000001002fff0

; The code specified after 'instructions' entry (below) is the code that will be
; processed by microprobe. The instruction format is similar to GNU assembler
; format, it also allows the specification of labels (NOT case sensitive) and
; references to the declared variables. It is also possible to specify instruction
; addresses and to do code expansion by referencing other user
; defined entries. Check the example below to see examples of these features.
;
; *****************************************************************************
; ******  Although Microprobe performs some sanity checks, it is the   ********
; ******  responsibility of the user to define correct code.           ********
; ******                                                               ********
; *****************************************************************************

instructions =
  <ELF_ABI_START>:
    JAL x1, c2mpt_function                            
    JAL x1, ELF_ABI_EXIT                              
  0x0000000010030000 <C2MPT_FUNCTION>:
    LUI x12, 65600                                    
    ADDI x12, x12, 0                                  
    LD x15, 8(x12)                                    
    LD x14, 80(x12)                                   
    BEQ x15, x0, C2MPT_FUNCTION+0X24                  
    LD x13, 0(x15)                                    
    LD x15, 8(x15)                                    
    ADD x14, x14, x13                                 
    BNE x15, x0, C2MPT_FUNCTION+0X14                  
    SLLI x14, x14, 1                                  
    SD x14, 80(x12)                                   
    JALR x0, x1, 0                                    
  0x0000000010030030 <MY_SUBROUTINE>:
    SLLI x10, x10, 1                                  
    LUI x15, 65600                                    
    SD x10, 80(x15)                                   
    JALR x0, x1, 0                                    
  <ELF_ABI_EXIT>:
    ADDI x0, x0, 0                                    
